name: Docker Image CI

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'GitHub branch to create image off.'
        required: true
        default: 'master'
      image-name:
        description: 'Image name.'
        required: true
        default: 'latest'
      tag:
        description: 'Comma-separated list of Docker tags to create.'
        required: true
        default: 'latest'
      merge-master:
        description: 'Merge with master.'
        type: boolean
        required: true
        default: false
      docker-hub-push:
        description: 'Docker Hub push?'
        type: boolean
        required: true
        default: true
      ghcr-push:
        description: 'GHCR.io push?'
        type: boolean
        required: true
        default: true
      user:
        description: ''
        required: false
        default: 'schedule'
      start-url:
        description: 'URL to call after workflow is kicked off.'
        required: false
        default: ''
      success-url:
        description: 'URL to call after Docker Image got built successfully.'
        required: false
        default: ''

env:
  N8N_TAG: ${{ inputs.tag || 'nightly' }}
  GH_TOKEN: ${{ github.token }}
  TEMP_IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/n8n-temp:${{ inputs.image-name || 'latest' }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      temp_image_name: ${{ env.TEMP_IMAGE_NAME }}

    steps:
      - name: Call Start URL - optionally
        run: |
          [[ "${{github.event.inputs.start-url}}" != "" ]] && curl -v -X POST -d 'url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}' ${{github.event.inputs.start-url}} || echo ""
        shell: bash

      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          ref: ${{ github.event.inputs.branch || 'master' }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR (Temporary Registry)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge Master - optionally
        run: |
          [[ "${{github.event.inputs.merge-master}}" == "true" ]] && git remote add upstream https://github.com/n8n-io/n8n.git -f; git merge upstream/master --allow-unrelated-histories || echo ""
        shell: bash

      - name: Build and push image to Temporary Registry
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          file: ./docker/images/n8n-custom/Dockerfile
          build-args: |
            N8N_RELEASE_TYPE=stable
          platforms: linux/amd64,linux/arm64
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ env.TEMP_IMAGE_NAME }}

      - name: Call Success URL - optionally
        run: |
          [[ "${{github.event.inputs.success-url}}" != "" ]] && curl -v ${{github.event.inputs.success-url}} || echo ""
        shell: bash

  push-to-dockerhub:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ inputs.docker-hub-push }}
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GHCR (Temporary Registry)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image from Temporary Registry
        run: |
          docker pull ${{ needs.build.outputs.temp_image_name }}

      - name: Tag and push image to DockerHub
        run: |
          for TAG in $(echo "${{ env.N8N_TAG }}" | tr ',' '\n'); do
            docker tag ${{ needs.build.outputs.temp_image_name }} ${{ secrets.DOCKER_USERNAME }}/n8n:$TAG
            docker push ${{ secrets.DOCKER_USERNAME }}/n8n:$TAG
          done

  push-to-ghcr:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ inputs.ghcr-push }}
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image from Temporary Registry
        run: |
          docker pull ${{ needs.build.outputs.temp_image_name }}

      - name: Tag and push image to GHCR
        run: |
          for TAG in $(echo "${{ env.N8N_TAG }}" | tr ',' '\n'); do
            docker tag ${{ needs.build.outputs.temp_image_name }} ghcr.io/${{ github.repository_owner }}/n8n:$TAG
            docker push ghcr.io/${{ github.repository_owner }}/n8n:$TAG
          done

  cleanup:
    runs-on: ubuntu-latest
    needs: [push-to-dockerhub, push-to-ghcr]
    if: always()
    steps:
      - name: Login to GHCR (Temporary Registry)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove Temporary Image
        run: |
          IMAGE_ID=$(echo "${{ env.TEMP_IMAGE_NAME }}" | sed 's/.*://')
          gh api --method DELETE "/orgs/${{ github.repository_owner }}/packages/container/n8n-temp/versions/$IMAGE_ID" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"
